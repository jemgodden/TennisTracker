from datetime import datetime
import pandas as pd
import streamlit as st
from streamlit_extras.switch_page_button import switch_page

from src.tennis import Match
from src.utils import Players, create_backend_df


# Application page - 'Load Match':
# Let user load a previously created match data csv file and set appropriate session state variables.


if __name__ == "__main__":

    st.set_page_config(
        page_title="Load Match",
        page_icon=":floppy_disk:",
        layout='wide',
    )

    st.title("Load a Previous Match :floppy_disk:")

    with st.container(key="upload_data"):
        st.header("Upload a File")

        uploaded_file = st.file_uploader(
            "Choose a CSV file",
            type=['csv'],
            accept_multiple_files=False
        )
        if uploaded_file:
            try:
                loaded_match_data = pd.read_csv(uploaded_file)
            except:
                st.error("File is not compatible. Please make sure you are uploading a file generated by this application.")
                st.stop()

            temp_backend_df = create_backend_df()
            if loaded_match_data.columns.values.shape[0] != temp_backend_df.columns.values.shape[0] \
                    or loaded_match_data.columns.intersection(temp_backend_df.columns).shape[0] != temp_backend_df.columns.values.shape[0]:
                st.error("File is not compatible. Please make sure you are uploading a file generated by this application.")
                st.stop()

            loaded_match_metadata = loaded_match_data['metadata'].apply(eval).iloc[0]

            loaded_match = Match(
                player1_name=loaded_match_metadata['player1_name'],
                player2_name=loaded_match_metadata['player2_name'],
                server=loaded_match_metadata['server'],
                match_best_of=loaded_match_metadata['match_best_of'],
                set_num_games=loaded_match_metadata['set_num_games'],
                set_tiebreak_to=loaded_match_metadata['set_tiebreak_to'],
                match_tiebreak=loaded_match_metadata['match_tiebreak'],
                match_tiebreak_to=loaded_match_metadata['match_tiebreak_to']
            )

            # Add points to new match.
            for _, row in loaded_match_data.iterrows():
                loaded_match.add_point(row.winner)

            st.session_state['match_data'] = loaded_match_data
            st.session_state['match'] = loaded_match
            st.session_state['match_winner'] = example_match.match_winner
            st.session_state['match_metadata'] = loaded_match_metadata
            st.session_state['match_datetime'] = datetime.strptime(loaded_match_metadata['datetime'], '%Y-%m-%d %H:%M:%S')
            st.session_state['player1_name'] = loaded_match_metadata['player1_name']
            st.session_state['player2_name'] = loaded_match_metadata['player2_name']

        st.caption("Note that loading a file will overwrite any previous information added in the 'New Match' page.  \nConsider saving the file first.")

    with st.container(key="upload_example"):
        st.header("Load Example File")

        st.write(
            "Clicking the below button will load an example file, which contains data for the 2025 Australian Open Men's Singles Final between Jannik Sinner and Alexander Zverev.  \n"
            "This is meant as a way show the capabilities of the application without having to track a new match.")

        if st.button("Load Example File"):
            example_match_data = pd.read_csv("example/AO_Final-Jannik_Sinner_vs_Alexander_Zverev-20250126_083000.csv")

            example_match_metadata = example_match_data['metadata'].apply(eval).iloc[0]

            example_match = Match(
                player1_name=example_match_metadata['player1_name'],
                player2_name=example_match_metadata['player2_name'],
                server=example_match_metadata['server'],
                match_best_of=example_match_metadata['match_best_of'],
                set_num_games=example_match_metadata['set_num_games'],
                set_tiebreak_to=example_match_metadata['set_tiebreak_to'],
                match_tiebreak=example_match_metadata['match_tiebreak'],
                match_tiebreak_to=example_match_metadata['match_tiebreak_to']
            )

            # Add points to new match.
            for _, row in example_match_data.iterrows():
                example_match.add_point(row.winner)

            st.session_state['match_data'] = example_match_data
            st.session_state['match'] = example_match
            st.session_state['match_winner'] = example_match.match_winner
            st.session_state['match_metadata'] = example_match_metadata
            st.session_state['match_datetime'] = datetime.strptime(example_match_metadata['datetime'], '%Y-%m-%d %H:%M:%S')
            st.session_state['player1_name'] = example_match_metadata['player1_name']
            st.session_state['player2_name'] = example_match_metadata['player2_name']

    with st.container(key="page_navigation"):
        st.write("###")
        st.divider()
        left, right = st.columns(2)
        if left.button("Continue Tracking Match"):
            switch_page("Track Match")
        if right.button("Analyse Loaded Match"):
            switch_page("Analyse Match")
